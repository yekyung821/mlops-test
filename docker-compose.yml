services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 10

  airflow-init:
    image: apache/airflow:2.9.3-python3.11
    depends_on:
      postgres:
        condition: service_healthy
    user: "${AIRFLOW_UID:-50000}:0"
    group_add:
      - "${DOCKER_GID}"
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_URI}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: "0"
      _PIP_ADDITIONAL_REQUIREMENTS: "apache-airflow-providers-docker apache-airflow-providers-slack"
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: /bin/bash -lc
    command: >
      "airflow db migrate &&
       airflow users create
         --username admin --firstname Admin --lastname User
         --role Admin --email admin@example.com --password admin || true"

  airflow-webserver:
    image: apache/airflow:2.9.3-python3.11
    depends_on:
      postgres:
        condition: service_healthy
    user: "${AIRFLOW_UID:-50000}:0"
    group_add:
      - "${DOCKER_GID}"
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_URI}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 30
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.9.3-python3.11
    depends_on:
      postgres:
        condition: service_healthy
    user: "${AIRFLOW_UID:-50000}:0"
    group_add:
      - "${DOCKER_GID}"
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW_DB_URI}
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler

  webapp:
    image: "${IMAGE_REPO:-yeeho0o/mlops-test}:${IMAGE_TAG:-latest}"
    depends_on: []
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - shared-data:/opt/shared
    command: >
      bash -lc "uvicorn mlops.src.webapp:app --host 0.0.0.0 --port 8000"

volumes:
  postgres-data:
  airflow-logs:
  shared-data:
    name: shared-data   # 실제 볼륨 이름 고정 (접두어 방지)

